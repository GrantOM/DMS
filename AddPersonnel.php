<?php require 'VerifyAdmin.inc' ?>
<?xml version="1.0" encoding="utf-8"?> 
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- Author: Grant O'Meara -->

<head>
	<title>Add Personnel</title>
	<!-- selected which header to display -->
	<?php require 'DMSSelectHeader.php'?>
</head>
	
<body>
	<!-- start wrapper -->
	<div id="wrapper">
		<!-- start page -->
		<div id="page">
			<!-- the menu bar -->
			<?php require 'DMSMenu.inc' ?>
			<!-- sidebar with related links -->
			<div id="sidebar1" class="sidebar">
				<h2> Related Links </h2>
				<ol>
					<li><a href="FindPersonnel.php">Find Personnel</a></li>
					<li><a href="AddPersonnel.php">Add Personnel</a></li>
					<li><a href="ManagePersonnel.php">Modify Personnel</a></li>
					<li><a href="DeployedPersonnel.php">Deployed Personnel</a></li>
				</ol>
			</div>
			
			<div id="content" class="content">
				<div id="stylized" class="myform">
					<h2> Add Personnel </h2>
					<p>Here is the add personnel page. Here you can add new personnel 
					information and create a login account for the user</p>
					
					<!-- post input to this page -->
					<form method="POST" action="AddPersonnel.php">
				
					<?php
					//allows input fields to be generated by functions
					include_once 'GenerateFields.inc';
					
					//an array that will store error messages when the checked fields do not meet their requirements
					$errors = array();
					
					//inputs generated by functions. checked means that they have error checking measures
					input_text_checked($errors, 'registerusername', 'Username', 'Must be 4 - 20 Characters');
					input_password_checked($errors, 'registerpassword', 'Password', 'Min. 6 characters, no spaces or symbols');
					input_password_checked($errors, 'confirmpassword', 'Confirm Password', 'Re-type your password');
					input_text_checked($errors, 'registerfirstname', 'First Name', 'Your first name');
					input_text_checked($errors, 'registerlastname', 'Last Name', 'Your last name');
					input_text_checked($errors, 'registerhomephone', 'Phone No.', 'Daytime contact number');
					input_text_checked($errors, 'registermobilephone', 'Mobile', 'Mobile contact number');
					input_text_checked($errors, 'registeremail', 'Email', 'Email address');
					
					//connect to database
					include dirname(__FILE__) . '\connection.php';

					// query string that will return all incident types that aren't the 'placeholder' value
					$query = "SELECT serviceID, serviceName FROM service";
					// execute the string
					$result = mysql_query($query);
					?>
					<!-- select menu composed of rows from the service table in the DB -->
					<label>Select Service
					<span class="small">Select the service the person belongs to</span>
					</label>
					<select id="service" name="service" required="required">
						<option value=""> Select One </option>
						<?php
						while($type = mysql_fetch_array($result)) {
							echo "<option value=" .$type['serviceID']. ">" .$type['serviceName']. "</option>";
						}
						?>
					</select>
					<!-- submit button -->
					<button type="submit" name="create">Sign-Up</button>
					</form>
					</div>
					
				<?php
				// executes the following statements when the sign up button is clicked
				if (isset($_POST['create'])) {
				
					require 'ValidateInput.inc';
					//these are calls to these functions to check validity of the inputs
					validateUsername($errors, $_POST, 'registerusername');
					validatePassword($errors, $_POST, 'registerpassword');
					confirmPassword($errors, $_POST, 'registerpassword', 'confirmpassword');
					validateEmail($errors, $_POST, 'registeremail');
					
					//lists the errors that were picked up by the validate functions
					echo '<ul style="list-style:none">';
					if ($errors) {
						echo '<b> Submission unsuccessful, check below for errors. </b><br/>';
						//returns the string generated by each error
						foreach($errors as $error) {
						echo '<li>', $error, '</li>';
					}
					echo '</ul>';
					
					//necessary to avoid duplication of the page or other errors cause by a lack of a statement
					foreach ($errors as $field => $error)
						echo "";
					} else {
						
						//checks that the username that was input doesn't already exist
						require 'ExistingUserCheck.inc';
						
						//checkExistingUsers returns true if 1 or more rows are returned when an SQL query searching
						//for any instances of its argument within the login table in the database						
						if (checkExistingUsers($_POST['registerusername'])) {
							echo 'Username already exists, please enter a different username';
						} else {
							//create database object
							$pdo = new PDO('mysql:host=localhost;dbname=inb201_draft', 'INB201', 'disaster');
							//allow database object to handle errors/exceptions
							$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
							//try catch allows us to handle SQL exception so in the event of an exception, we have feedback
							//that can tell us what is causing there error
							try {
								//prepared statement to be executed with the database object
								//the statement will insert values into the login table
								$stmt = $pdo->prepare('INSERT INTO login '.
														'VALUES (:id, :username, SHA2(:password, 0), :group); '			
								);
								//bind the prepared statement placeholder variables to actual variables
								$stmt->bindValue(':id', 0);
								$stmt->bindValue(':username', $_POST['registerusername']);
								$stmt->bindValue(':password', $_POST['registerpassword']);
								$stmt->bindValue(':group', $_POST['service']);
								//execute prepared statement
								$stmt->execute();
								
								//get the row that was just inserted into the table and assign the ID column of that row to the userid variable
								//this will allow us to set the loginID in personnel table to the same value as the loginID in login.
								$getid = $pdo->query("SELECT * FROM login WHERE loginUser = '" .$_POST['registerusername']. "'")->fetch();
								$userid = $getid['loginID'];
								
								//prepared statement to be executed with the database object
								//the statement will insert values into the personnel table
								$stmt3 = $pdo->prepare(	'INSERT INTO personnel '.
														'VALUES (:personnelid, :firstname, :middlename, :lastname, :homephone, :mobilephone, '.
														':email, :userid, :group) '
								);
								//bind the prepared statement placeholder variables to actual variables
								$stmt3->bindValue(':personnelid', 0);
								$stmt3->bindValue(':firstname', $_POST['registerfirstname']);
								$stmt3->bindValue(':lastname', $_POST['registerlastname']);
								$stmt3->bindValue(':middlename', '');
								$stmt3->bindValue(':homephone', $_POST['registerhomephone']);
								$stmt3->bindValue(':mobilephone', $_POST['registermobilephone']);
								$stmt3->bindValue(':email', $_POST['registeremail']);
								$stmt3->bindValue(':userid', $userid);
								$stmt3->bindValue(':group', $_POST['service']);
								//execute prepared statement
								$stmt3->execute();
								
							//if a PDOException object ($e) is caught, a message is displayed containing information about the error/exception
							} catch (PDOException $e) {
								echo 'Invalid input', $e->getMessage();
							} 
							
							//display an appropriate message if adding a new user is successful, then the page is reloaded to clear the input fields
							echo "User added successfully";	
							echo '<meta http-equiv="refresh" content="0; url= http://', $_SERVER['HTTP_HOST'], '/AddPersonnel.php">';
						}
					}
					
				}	
				?>			
				</form>
			</div>
		</div>
	</div>
</body>
	
</html>